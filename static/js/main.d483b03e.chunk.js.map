{"version":3,"sources":["copyToClipboard.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["copyToClipboard","content","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selection","getSelection","selected","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","App","state","uuid","id","this","setState","className","onClick","generateNewOne","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAAe,SAASA,EAAgBC,GAEpC,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGG,MAAQJ,EACXC,EAAGI,aAAa,WAAY,IAC5BJ,EAAGK,MAAMC,SAAW,WACpBN,EAAGK,MAAME,KAAO,UAChBN,SAASO,KAAKC,YAAYT,GAE1B,IAAMU,EAAYT,SAASU,eAErBC,KACFF,GAAaA,EAAUG,WAAa,IAC9BH,EAAUI,WAAW,GAE/Bd,EAAGe,SACHd,SAASe,YAAY,QACrBf,SAASO,KAAKS,YAAYjB,GACtBU,GAAaE,IACbF,EAAUQ,kBACVR,EAAUS,SAASP,I,ICmBZQ,E,2MAjCXC,MAAQ,CACJC,KAAMC,O,mFAINzB,EAAgB0B,KAAKH,MAAMC,Q,uCAI3B,IAAMA,EAAOC,MACbC,KAAKC,SAAS,CAAEH,SAChBxB,EAAgBwB,K,+BAGV,IAAD,OACL,OACI,yBAAKI,UAAU,OACnB,4BAAQA,UAAU,cACd,iDACF,4BAAKF,KAAKH,MAAMC,MAChB,0EACA,uBACII,UAAU,WACVC,QAAS,kBAAM,EAAKC,mBAFxB,0B,GAtBQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d483b03e.chunk.js","sourcesContent":["export default function copyToClipboard(content: string): void {\n\n    const el = document.createElement('textarea');  // Create a <textarea> element\n    el.value = content;                                 // Set its value to the string that you want copied\n    el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';                      // Move outside the screen to make it invisible\n    document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\n\n    const selection = document.getSelection();\n\n    const selected =\n        selection && selection.rangeCount > 0        // Check if there is any content selected previously\n            ? selection.getRangeAt(0)     // Store selection if found\n            : false;                                    // Mark as false to know no selection existed before\n    el.select();                                    // Select the <textarea> content\n    document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\n    document.body.removeChild(el);                  // Remove the <textarea> element\n    if (selection && selected) {                                 // If a selection existed before copying\n        selection.removeAllRanges();    // Unselect everything on the HTML document\n        selection.addRange(selected);   // Restore the original selection\n    }\n};\n","import React, { Component } from 'react';\nimport id from 'uuid/v4';\nimport './App.css';\nimport copyToClipboard from './copyToClipboard';\n\nclass App extends Component<{}, { uuid: string }> {\n    state = {\n        uuid: id(),\n    };\n\n    componentDidMount(): void {\n        copyToClipboard(this.state.uuid);\n    }\n\n    generateNewOne(): void {\n        const uuid = id();\n        this.setState({ uuid });\n        copyToClipboard(uuid);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n        <header className=\"App-header\">\n            <h1>UUID v4 generator</h1>\n          <h2>{this.state.uuid}</h2>\n          <p>UUID has been copied to your clipboardÂ !</p>\n          <a\n              className=\"App-link\"\n              onClick={() => this.generateNewOne()}\n          >\n            Generate new one\n          </a>\n        </header>\n      </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}